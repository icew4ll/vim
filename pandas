# type of
type(df)

# shape (# rows/columns)
df.shape

# column names
# u' denotes unicode
df.columns

# dtypes
df.dtypes

# head
df.head()

# single column to new df
df2 = df['column_name']

# multi columns to new df
df3 = df[['col_name1','col_name2]]

# 1st column
df1 = df[1]

# range
df = df[range(1, 3)]
# convert range to list
df = df[list(range(1, 3))]

# subset 1st row
# returns type 'series', dataframes are a collection of 'series'
df.loc[0]

# last row
df = df.loc[df.shape[0] - 1]

# subset by row name OR integer number
# 1st checks for row name then integer number
df.ix[0]

# subset 1st, 100th, 1000th row
df.ix[[0,99,999]]

# subset by rows and columns
df.ix[rows,columns]
df.ix[0, 'continent']
df.ix[0, 1]

# subset multiple rows and columns
df.ix[[0, 99, 999], ['continent', 'year']]

# groupby
# group all data by column 'year'
# group data by each year, then pull out 'lifeExp' column
# returns mean of 'lifeExp' across all countries for each year
df.groupby('year')['lifeExp'].mean()

# multi groupby
# for each year and each continent returns mean 'lifeExp'
df.groupby(['year', 'continent'])['lifeExp'].mean()

# plot
import matplotlib.pyplot as plt
%matplotlib inline
df.groupby('year')['lifeExp'].mean()

# concat dataframe rows
row_concat = pd.concat([df1, df2, df3])
row_concat.shape

# concat dataframe columns
# pass additional params to concat function with ','
# axis=0 concat row-wise
# axis=1 concat col-wise
col_concat = pd.concat([df1, df2, df3], axis=1)

# map
# series method
# maps 'female' values to 0 and 'male' values to 1 in 'Sex_num' column
df['Sex_num'] = df.Sex.map({'female':0, 'male':1})

# character count
# apply method(used as series method) applies python 'len' function to every
# element in series 'Name'
df['char'] = df.Name.apply(len)

# rounding with numpy ceiling
import numpy as np
df['ceil'] = df.Price.apply(np.ceil)

# string methods
# split 'Name' series by comma
# returns series of python lists, each list is strings split by ','
df['split'] = df.Name.str.split(',')

# function that return first list element from each series element
def get_1st_element(my_list, position):
  return my_list[position]

# apply function 'get element' on every element in series
# using argument position= 0
df.Name.str.split(',').apply(get_element, position=0).head()

# lambda version of above
df.Name.str.split(',').apply(lambda x: x[0]).head()

# check head specific columns
df.loc[0:4, ['Price','Name']]

# range selection
# subset all rows and columns "Price" to "Name"
df.loc[:, 'Price':'Name']

# apply as dataframe method along either axis of a dataframe
# applies a function 'max' along vertical axis (columns 'Price' through 'Name')
# axis=0 applies function across columns in df
# axis=1 applies function across rows in df
df.loc[:, 'Price':'Name'].apply(max, axis=0)

# for each row in df return the column with max value
df.loc[:, 'Price':'Name'].apply(np.argmax, axis=1)

# applymap method is dataframe method
# applies function to every element of a dataframe
# converts every element to float from subset
df.loc[:, 'Price':'Name'].applymap(float)
